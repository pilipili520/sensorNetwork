public class TestSerialMsg extends net.tinyos.message.Message {

    public static final int DEFAULT_MESSAGE_SIZE = 2;

    public static final int AM_TYPE = 137;

    public TestSerialMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    public TestSerialMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    public TestSerialMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    public TestSerialMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    public TestSerialMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    public TestSerialMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    //在给定的基本偏移处创建嵌入给定消息中的新TestSerialMsg。
    public TestSerialMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    public TestSerialMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    //返回此消息的String表示形式。 包括消息类型名称和非索引字段值。
    public String toString() {
      String s = "Message <TestSerialMsg> \n";
      try {
        s += "  [counter=0x"+Long.toHexString(get_counter())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    public static boolean isSigned_counter() {
        return false;
    }

   
    public static boolean isArray_counter() {
        return false;
    }

    //返回字段'counter'的偏移量（以字节为单位）
    public static int offset_counter() {
        return (0 / 8);
    }

    //返回字段'counter'的偏移量（以位为单位）
    public static int offsetBits_counter() {
        return 0;
    }

    //返回字段'counter'的值（作为int）
    public int get_counter() {
        return (int)getUIntBEElement(offsetBits_counter(), 16);
    }

    //设置字段'counter'的值
    public void set_counter(int value) {
        setUIntBEElement(offsetBits_counter(), 16, value);
    }

    //返回字段大小（以字节为单位）
    public static int size_counter() {
        return (16 / 8);
    }

    //返回字段大小（以字节为单位）
    public static int sizeBits_counter() {
        return 16;
    }

}
